<?xml version="1.0" encoding="UTF-8"?>
<mule 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation=" 
		http://www.mulesoft.org/schema/mule/ee/core 
		http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
		http://www.mulesoft.org/schema/mule/core 
		http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/salesforce 
		http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
		http://www.mulesoft.org/schema/mule/batch 
		http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd">
		
	<sub-flow name="initialize-batch">
		<set-variable doc:name="received records" variableName="receivedRecords" value="#[sizeOf(payload)]" />
		<set-variable doc:name="get batch number" variableName="batchNumber" value="#[attributes.queryParams.batchNumber as String default '']" />
		<set-variable doc:name="set view" variableName="view" value='#["View: " ++ (attributes.maskedRequestPath replace "/" with(""))]' />

		<logger level="INFO" category="app" 
			message="#[output application/java --- vars.view ++ ', batch number: ' ++ vars.batchNumber ++ ', input records: ' ++ (vars.receivedRecords as String default '') ]" /> 
		<set-variable doc:name="start service" variableName="start" value="#[now() as Number {unit: 'milliseconds'}]" />
		<set-variable doc:name="start service date" variableName="startDate" value="#[now()]" />
		<set-variable doc:name="save payload" variableName="originalPayload" value="#[payload]" />
		<set-variable doc:name="initialize batch list" variableName="batchList" value="#[[]]"  />
	</sub-flow>
	
	<flow name="job-bulk" >
		<set-variable doc:name="register start job" variableName="batchStart" value="#[now() as Number {unit: 'milliseconds'}]"/>
		<set-variable doc:name="set detailErrorBulkApi" variableName="detailErrorBulkApi" value=""/>
		<set-variable doc:name="set errorBulkApi" variableName="errorBulkApi" value=""/>
		<remove-variable doc:name="remove original payload" variableName="originalPayload"/>
		<remove-variable doc:name="remove list backend keys" variableName="listIds"/>

		<ee:transform doc:name="build bulk csv" >
            <ee:message >
                <ee:set-payload ><![CDATA[%dw 2.0
                output application/csv quoteValues=true,header=true,separator=","
                ---
				payload
                ]]>
                </ee:set-payload>
            </ee:message>
        </ee:transform>

		<logger level="INFO" category="app" message="#[payload]" />

		<salesforce:create-job-bulk-api-v2 
			doc:name="job" 
			config-ref="GlobalSalesforceConfig" 
			objectType="#[vars.salesforceObject]" 
			operation="#[vars.bulkOperation]" 
			externalIdFieldName="#[vars.externalIdField]"
			readTimeout="60"
			readTimeoutUnit="SECONDS">
			<reconnect count="5"/>
		</salesforce:create-job-bulk-api-v2>
		<set-variable doc:name="save jobId" variableName="jobId" value="#[payload.id]"/>
		<logger level="INFO" category="app" message="#[output application/java --- vars.view ++ ', salesforce job: ' ++ vars.jobId as String]" />

		<try doc:name="verify job status">
			<until-successful doc:name="until sucess" maxRetries="${batch.maxretries}" millisBetweenRetries="${batch.millisretry}">
				<salesforce:get-job-state-bulk-api-v2 config-ref="GlobalSalesforceConfig" id="#[vars.jobId]"/>
				<choice doc:name="verify job status"  >
					<when expression='#[payload.state == "JobComplete"]'>
						<set-variable doc:name="status 200" variableName="httpStatus" value="#[200]"/>
						<set-variable doc:name="message success" variableName="message" value="${messages.batch-success}"/>
					</when>
					<when expression='#[payload.state == "Failed"]'>
						<logger doc:name="job error" level="INFO" message="#[output application/java --- vars.view ++ ', error found in job: ' ++ (vars.jobId as String) ++ ', status: ' ++ payload.state ]" />
						<logger doc:name="payload result" level="INFO" message="#[output application/json --- payload]" />
						<set-variable doc:name="set errorBulkApi" variableName="errorBulkApi" value="#[payload]"/>
						<set-variable doc:name="status 404" variableName="httpStatus" value="#[404]"/>
						<set-variable doc:name="message error" variableName="message" value="${messages.batch-error}"/>
					</when>
					<otherwise>
						<set-variable doc:name="status 404" variableName="httpStatus" value="#[404]"/>
						<set-variable doc:name="message still running" variableName="message" value="${messages.batch-stillrunning}"/>
						<logger doc:name="attempt" level="INFO" message="#[output application/java --- vars.view ++ ', job still running: ' ++ (vars.jobId as String) ++ ', status: ' ++ payload.state ++ ', max attempts: ${batch.maxretries}']" />
						<raise-error doc:name="Raise error" type="MULE:CONNECTIVITY" description="The batch job still processing in Salesforce"/>
					</otherwise>
				</choice>
			</until-successful>

			<error-handler>
				<on-error-continue/>	
			</error-handler>
		</try>
		<set-variable doc:name="records failed" variableName="numberRecordsFailed" value="#[ payload.numberRecordsFailed ]"/>
		<set-variable doc:name="datastore processing time" variableName="datastoreProcessingTime" value="#[ payload.totalProcessingTime ]"/>
		<set-variable doc:name="records processed" variableName="numberRecordsProcessed" value="#[ payload.numberRecordsProcessed ]"/>
		<set-variable doc:name="job state" variableName="state" value="#[ payload.state ]"/>
		<set-variable doc:name="batch-time-process" variableName="internalBatchDuration" value="#[(now() as Number {unit: 'milliseconds'}) - vars.batchStart]"/>

		<choice doc:name="jobs with errors" >
			<when expression='#[vars.numberRecordsFailed > 0 or payload.state == "Failed"]'>
				<salesforce:retrieve-job-failed-results-bulk-v2 config-ref="GlobalSalesforceConfig" id="#[vars.jobId]"/>
				<set-variable doc:name="set detailErrorBulkApi" variableName="detailErrorBulkApi" value="#[ payload ]"/>
			</when>
		</choice>

		<flow-ref doc:name="build batch result" name="batch-result"/>
	</flow>

	<sub-flow name="batch-result">
		<ee:transform doc:name="add result to batchList" >
			<ee:variables >
				<ee:set-variable variableName="batchList"><![CDATA[%dw 2.0
                output application/json
                ---
				vars.batchList ++
				[{
					job: vars.jobId,
					state: vars.state,
					object: vars.salesforceObject,
					operation: vars.bulkOperation,
					recordsFailed: vars.numberRecordsFailed,
					errorBulkApi: if (isEmpty(vars.errorBulkApi)) '' else vars.errorBulkApi,
					detailErrorBulkApi: if (isEmpty(vars.detailErrorBulkApi)) '' else vars.detailErrorBulkApi,
					recordsProcessed: vars.numberRecordsProcessed,
					datastoreProcessingTime: vars.datastoreProcessingTime,
					batchProcessingTime: vars.internalBatchDuration
				}]
                ]]>
				</ee:set-variable>	
			</ee:variables>
        </ee:transform>		
	</sub-flow>

	<sub-flow name="service-response">
		
		<ee:transform doc:name="count jobs with errors" >
			<ee:variables >
				<ee:set-variable variableName="jobsWithErrors"><![CDATA[%dw 2.0
					output application/json
					import countBy from dw::core::Arrays
					---
					if ( !isEmpty(vars.batchList))
						vars.batchList countBy($.recordsFailed != 0 or $.state=="Failed")
					else 0
                ]]>
				</ee:set-variable>	
			</ee:variables>
        </ee:transform>		

		<choice doc:name="jobs with errors" >
			<when expression='#[vars.jobsWithErrors > 0]'>
				<set-variable doc:name="status 404" variableName="httpStatus" value="#[404]"/>
				<set-variable doc:name="message error" variableName="message" value="${messages.batch-backend-errorrecords}"/>
			</when>
		</choice>

		<ee:transform doc:name="add result to batchList" >
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
					output application/json

					import * from dw::core::Periods
					import leftPad from dw::core::Strings
					
					var processingTime = now() - vars.startDate
					var milliseconds = processingTime as Number {unit: 'milliseconds'} mod 1000
					---
					{
						status: 		vars.httpStatus,
						message: 		vars.message,
						startDate: 		(vars.startDate as DateTime) as String {format:"yyyy-MM-dd HH:mm:ss"},
						endDate: 		now() as String {format:"yyyy-MM-dd HH:mm:ss"},
						processingTime: leftPad(processingTime.hours as String, 2, "0") ++ ":" ++ 
										leftPad(processingTime.minutes as String, 2, "0") ++ ":" ++
										leftPad((processingTime.seconds mod 60 as Number) as String, 2, "0") ++ ":" ++
										leftPad(milliseconds as String, 3, "0"),
						receivedRecords: 	vars.receivedRecords,
						duplicateRecords:	if (!isEmpty(vars.duplicateRecords)) 
												vars.duplicateRecords 
											else 
												'',
						missingIds: 		if (!isEmpty(vars.missingIds)) 
						 						vars.missingIds 
											else 
												'',
						correlationId: 		correlationId,
						clientbatchNumber: 	vars.batchNumber,
						batchList: 			vars.batchList
					}
					]]>
				</ee:set-payload>
			</ee:message>
        </ee:transform>		
	</sub-flow>

	<sub-flow name="analyze-input-records-contact">

		<ee:transform doc:name="find missingIds for conctact" >
			<ee:variables >
				<ee:set-variable variableName="missingIds"><![CDATA[%dw 2.0
					output application/json

					var backendId = vars.listIds.contactId
					var inputId = vars.originalPayload.contactId
					var unmatchedKeys = (inputId -- backendId) distinctBy $					
					---
					{
						inputRecords: sizeOf(inputId),
						backendKeys:  sizeOf(backendId),
						missingKeys:  unmatchedKeys,
						totalMissing: sizeOf(unmatchedKeys)
					}
				]]>
				</ee:set-variable>	
			</ee:variables>
		</ee:transform>
		
		<choice doc:name="found all keys in Salesforce?" >
            <when expression='#[vars.missingIds.totalMissing > 0]'>
				<logger level="DEBUG" category="app" message="#[output application/java --- vars.view ++', error missing identifiers: ' ++ vars.missingIds.totalMissing as String]" />	
				<set-variable doc:name="status 404" variableName="httpStatus" value="#[404]"/>
				<set-variable doc:name="message error" variableName="message" value="${messages.batch-primaryidentifier-notpresent}"/>
				<remove-variable doc:name="remove original payload" variableName="originalPayload"/>
				<remove-variable doc:name="remove original payload" variableName="listIds"/>
			</when>
		</choice>
	</sub-flow>
</mule>
