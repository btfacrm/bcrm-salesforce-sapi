<?xml version="1.0" encoding="UTF-8"?>
<mule 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation=" 
		http://www.mulesoft.org/schema/mule/ee/core 
		http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
		http://www.mulesoft.org/schema/mule/core 
		http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/salesforce 
		http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
		http://www.mulesoft.org/schema/mule/batch 
		http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd">

    <flow name="endpoint-disbursement"> 
        <flow-ref doc:name="initialize batch" name="initialize-batch"/>
        <!-- Functions disabled on 6/4/2025 used to correct Datetime field on line 82 and 87 from mountain time to UTC
        	example:  toUTC(item.settleDate
        				dstAdjust(item.date
        -->
        <ee:transform doc:name="build Salesforce payload for transactions" >
            <ee:message >
                <ee:set-payload ><![CDATA[%dw 2.0
                import * from dw::core::Dates

                fun utcdts(mountainDate: DateTime) = 
                    mountainDate >> "Etc/GMT-6" as String
                fun utc(mountainDate: DateTime) = 
                    mountainDate >> "Etc/GMT-7" as String

                fun toUTCfromDST(mountainDate: DateTime) = 
                    utcdts(mountainDate)[0 to sizeOf(utcdts(mountainDate))-7 ] ++ "Z"
                fun toUTC(mountainDate: DateTime) = 
                    utc(mountainDate)[0 to sizeOf(utc(mountainDate))-7 ] ++ "Z"
                    
                fun getDate(year: Number, month: Number, day: Number) =
                    date({year:year, month: month, day: day})

                fun getSundayOfMonth(dm: Date, number: Number)=  
                    ((1 to 14 map (day) -> 
                        'day':  if ( getDate(dm.year, dm.month, day).dayOfWeek == 7 ) day
                                else 0
                    ) filter (value, index) -> (value.day != 0))[number - 1].day

                fun dstStart(original: DateTime) = 
                    dateTime({
                        year: original.year, 
                        month: 3,
                        day: getSundayOfMonth( getDate(original.year, 3, 1), 2 ), 
                        hour: 2,
                        minutes: 0,
                        seconds: 0,
                        timeZone: |+00:00|
                    }) 

                fun dstEnd(original: DateTime) = 
                    dateTime({
                        year: original.year, 
                        month: 11,
                        day: getSundayOfMonth( getDate(original.year, 11, 1), 1 ), 
                        hour: 2,
                        minutes: 0,
                        seconds: 0,
                        timeZone: |+00:00|
                    }) 

                fun dstAdjust(date: DateTime) =
                    if (date >= dstStart(date) and date < dstEnd(date))
                        toUTCfromDST(date) else toUTC(date)

                ---
                vars.originalPayload map (item, index) -> {
                    'Transaction_Number__c':    item.transaction,
                    'Trust_Account__r.IIM_Account_Number__c': item.account,
                    'Name':                     item.transaction,
                    'Code__c':                  item.code,
                    'Disbursement_Text__c':     item.disbursementText,
                    'Amount__c':                item.amount,
                    'Debit_Credit_Indicator__c':item.debitCreditIndicator,
                    'Status__c':                item.status,
                    'Settle_Date__c':           item.settleDate,
                    'Settle_Flag__c':           item.settleFlag,
                    'Income_Indicator__c':      item.incomeIndicator,
                    'Tax_Code__c':              item.taxCode,
                    'Tax_Year__c':              item.taxYear,
                    'Transaction_Date_Time__c': 	item.date,
					'DocRef_Number__c':			item.docRefNumber,
					'Control_Log__c':			item.controlLog,
					'ReceivingBankName__c':		item.receivingBankName,
					'ABA_Number__c': 			item.abaNumber,
					'CreditAcctName__c':		item.creditAcctName,
					'CreditAcctNumber__c':		item.creditAcctNumber,
					'DocumentNumber__c':		item.documentNumber,
					'PaidToContactName__c':		item.paidToContactName,
					'PaidToAddress1__c':		item.paidToAddress1,
					'PaidToAddressCity__c':		item.paidToAddressCity,
					'PaidToAddressState__c':	item.paidToAddressState,
					'PaidToAddressZip__c':		item.paidToAddressZip	
                }
                ]]>
                </ee:set-payload>
            </ee:message>
        </ee:transform>

        <!-- <logger level="DEBUG" category="app" message="#[output application/json - payload]" /> -->

        <set-variable doc:name="set Salesforce object" variableName="salesforceObject" value="Trust_Account_Disbursement__c" />
        <set-variable doc:name="set operation" variableName="bulkOperation" value="upsert" />
        <set-variable doc:name="set externalIdField" variableName="externalIdField" value="Transaction_Number__c"/>
        <flow-ref doc:name="run job" name="job-bulk"/>

        <flow-ref doc:name="service response" name="service-response"/>

        <error-handler ref="global-error-handler" />		
    </flow>
</mule>
